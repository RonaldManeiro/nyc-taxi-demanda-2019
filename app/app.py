import streamlit as st
from utils import (load_data, preprocess_data, trips_per_hour,
                   avg_trip_duration_per_hour, trip_distance_distribution, payment_distribution, fare_tip_relation, trips_per_zone)
import plotly.express as px
import statsmodels.api as sm
import json
import os
import requests
import io

BASE_DIR = os.path.dirname(os.path.abspath(__file__))


# Configuracion de la pagina.
st.set_page_config(
    page_title="Demanda de Taxis en NYC - Diciembre 2019",
    page_icon="üöï",
    layout="wide"
)

# Titulo principal

st.title("An√°lisis de la Demanda de Taxis en Nueva York - Diciembre 2019")


# Cargar y preparar datos


@st.cache_data
def load_and_prepare():
    df = load_data()
    df = preprocess_data(df)
    return df


df = load_and_prepare()

# Barra lateral de navegacion
st.sidebar.title("Navegaci√≥n")
opcion = st.sidebar.radio(
    "Ir a:",
    [
        "1. Introducci√≥n",
        "2. Planteamiento del problema",
        "3. Marco te√≥rico",
        "4. Datos",
        "5. Cuestionario SQL",
        "6. An√°lisis exploratorio de datos",
        "7. An√°lisis Estad√≠stico",
        "8. Conclusiones",
        "9. Bibliograf√≠as"
    ]
)

# Contenido segun la opcion seleccionada
if opcion == "1. Introducci√≥n":
    st.markdown("""
### üìä Introducci√≥n

Este proyecto presenta un an√°lisis sobre el comportamiento de la **demanda de taxis en la ciudad de Nueva York durante diciembre de 2019**.

El objetivo principal es **comprender los patrones de movilidad**, identificar las **zonas con mayor actividad** y analizar c√≥mo **var√≠a la demanda seg√∫n la hora del d√≠a y la ubicaci√≥n**.

La aplicaci√≥n est√° compuesta por:
- üß† Un **an√°lisis computacional** desarrollado con **Python y Streamlit**.
- üìà Un **dashboard en Power BI**.
- üíæ Un **cuestionario SQL** con consultas espec√≠ficas sobre la base de datos.

---

Puedes explorar los distintos apartados desde el men√∫ lateral ‚úÖ
""")

if opcion == "2. Planteamiento del problema":
    st.header("Planteamiento del problema")
    st.write("""
                La movilidad urbana es uno de los ejes m√°s importantes para el funcionamiento eficiente de una gran ciudad. En metr√≥polis como Nueva York, el servicio de taxis juega un rol crucial en el transporte diario de millones de personas. A lo largo del d√≠a, la demanda de taxis no es uniforme: var√≠a seg√∫n la hora, el d√≠a de la semana y la zona geogr√°fica. Estas variaciones reflejan patrones sociales, econ√≥micos y de comportamiento urbano (por ejemplo, desplazamientos laborales en horas punta, actividades nocturnas o turismo).
             """)
    st.write("Comprender estos patrones permite a empresas, autoridades de transporte y conductores tomar decisiones m√°s informadas, como:")
    st.markdown("""
    - Optimizar la distribuci√≥n de taxis durante las horas pico 
    - Dise√±ar pol√≠ticas de movilidad m√°s eficientes 
    - Reducir tiempos de espera para usuarios 
    """)
    st.write("Este proyecto busca analizar la demanda de taxis en la ciudad de Nueva York durante 2019, con enfoque en patrones horarios y geogr√°ficos, utilizando herramientas estad√≠sticas y computacionales modernas.")

    st.subheader("Objetivo General")
    st.write("Analizar la distribuci√≥n temporal y espacial de la demanda de taxis en Nueva York durante el a√±o 2019, para identificar zonas y horarios de alta demanda que puedan aportar conclusiones √∫tiles desde el punto de vista estad√≠stico y urbano.")

    st.subheader("Objetivos Especificos")
    st.markdown("""
    - Procesar y limpiar la base de datos de viajes en taxi para obtener un subconjunto representativo manejable.
    - Explorar la variaci√≥n de la demanda a lo largo del d√≠a, identificando horas pico.
    - Analizar la distribuci√≥n geogr√°fica de los viajes para determinar zonas de mayor concentraci√≥n de demanda.
    - Construir un dashboard en Power BI que permita visualizar los patrones temporales y espaciales.
    - Desarrollar una aplicaci√≥n en Python (Streamlit) para interactuar din√°micamente con los datos y realizar an√°lisis b√°sicos.
    - Realizar un breve an√°lisis estad√≠stico descriptivo que permita interpretar los resultados obtenidos.
    """)


elif opcion == "3. Marco te√≥rico":
    st.header("Marco te√≥rico")

    st.subheader("Antecedentes de la Investigaci√≥n")

    st.write("Los antecedentes permiten definir e interpretar el problema planteado mediante la s√≠ntesis de un marco referencial conformado por las exploraciones y trabajos vinculados a la investigaci√≥n, estableciendo un enfoque te√≥rico y metodol√≥gico de la misma. Los antecedentes que sustentan esta investigaci√≥n son las que mencionan a continuaci√≥n:")

    st.write("En ‚ÄúAnalysis and prediction of New York City taxi and Uber demands‚Äù (realizado por D. Correa y C. Moyano), analizan sobre la distribuci√≥n espacio/temporal y el nivel de demanda tanto de los taxis (amarillos y verdes) como del servicio de Uber. Y no solamente se lleg√≥ a la conclusi√≥n de que los dos servicios son imprescindibles en Nueva York, sino que tambi√©n el m√°s utilizado es el de los taxis amarillos con un 86% del total de viajes registrados (se analizaron m√°s de 90 millones de viajes, y 78.382.423 fueron de los taxis amarillos).  Adem√°s de la aplicaci√≥n de herramientas estad√≠sticas como el ‚Äúmodelo de regresi√≥n lineal‚Äù para el an√°lisis de los resultados.")

    st.write("Tambi√©n se encuentra el art√≠culo ‚ÄúTestimonios del Taxi: Aprendizajes de 15 a√±os de viajes en Nueva York‚Äù (hecho por Fernando A. Ram√≠rez, en el a√±o 2024), donde el autor explica la manera en que las apps de movilidad han impactado en los negocios tradicionales de taxis en Nueva York (aunque no tom√≥ en cuenta por completo el a√±o 2019 durante la realizaci√≥n del an√°lisis, debido a la aparici√≥n del Covid-19 durante aquella √©poca y el impacto predecible que iba a tener en los medios de transporte debido a la cuarentena). Se puede resaltar el hecho de que los taxis amarillos no estaban ‚Äúcaptando muchos viajes cortos que son m√°s rentables por minuto de conducci√≥n‚Äù, mientras que con las apps de movilidad ocurr√≠a el caso contrario hac√≠an ‚Äúun mejor trabajo captando viajes m√°s cortos y menos planificados gracias a la ubicuidad y facilidad de pago que ofrecen estas aplicaciones m√≥viles‚Äù.")

    st.subheader("Bases Te√≥ricas")

    st.write("Se tiene que la Movilidad Urbana es el conjunto de desplazamientos de personas y mercanc√≠as dentro de un √°rea urbana y las condiciones en las que se realizan. Este concepto abarca todos los modos de transporte (p√∫blico, privado, taxis/servicios de viaje compartido) y su impacto en la calidad de vida, el medio ambiente y la eficiencia econ√≥mica de la ciudad.")

    st.write("Entre los medios de transporte que se usan hoy en d√≠a en la sociedad, el Taxi es un veh√≠culo de alquiler que incluye un conductor profesional que se contrata para transportar pasajeros a uno o varios destinos elegidos por ellos (el cliente puede indicar el punto de partida y el de llegada en su viaje). La palabra ¬´taxi¬ª, seg√∫n el Diccionario de la lengua espa√±ola, es una forma abreviada de la palabra ¬´tax√≠metro¬ª, que a su vez deriva del griego œÑŒ¨ŒæŒπœÇ, ¬´tasa¬ª y ŒºŒ≠œÑœÅŒøŒΩ, que significa ¬´medida¬ª. Usualmente, los lugares donde se recoge y se deja al pasajero se deciden por el proveedor (oferente), mientras que el usuario (demandante) los determina.")

    st.write("A diferencia de los otros tipos de transporte de personas, como son las l√≠neas del metro, tranv√≠a o del autob√∫s, el servicio ofrecido por el taxi se caracteriza por ser ¬´puerta a puerta¬ª. La persona que tiene por oficio la conducci√≥n de un taxi se le llama ¬´taxista¬ª. Sin mencionar que la tarifa se calcula generalmente a trav√©s de un tax√≠metro, aunque suelen estar reguladas por la autoridad local.")

    st.write("Los tipos de taxis se pueden clasificar por su nivel de servicio (ejecutivo, convencional), tecnolog√≠a (el√©ctrico, aut√≥nomo), accesibilidad (adaptado) o funci√≥n (colectivo). Tambi√©n existen clasificaciones locales, como los taxis de sitio, libres o de radio en algunas ciudades, o el tipo de veh√≠culo usado.")

    st.markdown("**Seg√∫n el tipo de servicio y veh√≠culo:**")

    st.markdown("""
    - **Taxis convencionales:** Veh√≠culos est√°ndar que se pueden tomar en la calle o en paradas. 
    - **Taxis ejecutivos:** Suelen ser veh√≠culos de gama alta, m√°s c√≥modos y con un servicio exclusivo. 
    - **Taxis adaptados:** Dise√±ados para personas con discapacidades, equipados con rampas o elevadores. 
    - **Taxis el√©ctricos:** Veh√≠culos de cero emisiones, impulsados por energ√≠a el√©ctrica. 
    - **Taxis aut√≥nomos:** Veh√≠culos que operan sin conductor humano, gracias a la tecnolog√≠a avanzada. 
    - **Taxis acu√°ticos:** En ciudades con cuerpos de agua, ofrecen transporte sobre el agua, como en r√≠os o lagos.
    """)

    st.markdown("**Seg√∫n la modalidad y operaci√≥n:**")

    st.markdown("""
    - **Taxis de sitio:** Tienen una ubicaci√≥n fija y se solicitan a trav√©s de una central telef√≥nica.
    - **Taxis libres:** Se pueden encontrar en la calle o en paradas designadas.
    - **Taxis colectivos:** Comparten ruta y precio predeterminado entre varios pasajeros. A veces se les llama "colectivos" o "carro de ruta".
    """)

    st.markdown("**Seg√∫n el pa√≠s:**")

    st.markdown("""
    - **Taxis amarillos:** Caracter√≠sticos en muchas ciudades, a menudo asociados con el transporte p√∫blico general. 
    - **Taxis de sitio o "pulmon√≠as":** En ciertas regiones, son veh√≠culos espec√≠ficos con un color o caracter√≠stica distintiva, como en Mazatl√°n. 
    - **Cocotaxis:** Veh√≠culos motorizados con forma de coco, t√≠picos de Cuba. 
    - **Tuc tuc:** Mototaxis que se encuentran en ciudades de Tailandia y otras partes del mundo.
    """)

    st.write("En Nueva York, los taxis son de dos variedades: amarillo y verde (son s√≠mbolos de la ciudad ampliamente reconocibles). Los veh√≠culos de taxi deben tener una medalla de taxi para operar: este sistema fue creado en 1937 como una limitaci√≥n impuesta por el gobierno en la oferta de taxis; pero luego, Nueva York ya no vendi√≥ m√°s medallas hasta 1996 despu√©s de una subasta donde se presentar√≠a m√°s adelante una escasez que, para el 2014, se vend√≠an a m√°s de un mill√≥n de d√≥lares cada una). La principal diferencia entre los taxis amarillos y verdes radica en las zonas donde est√°n autorizados para recoger pasajeros:")

    st.markdown("""
    - **Los taxis amarillos (‚Äúmedallion taxis‚Äù)** pueden recoger pasajeros en cualquier punto de la ciudad de Nueva York, incluyendo los cinco distritos y los aeropuertos. Adem√°s de que se pueden detener en la calle con la mano o encontrar en las paradas designadas para taxis.
    - **Los taxis verdes** (com√∫nmente conocidos como **"boro taxis"**, que empezaron a aparecer en agosto del 2013), est√°n autorizados para recoger pasajeros en los distritos de Queens, Brooklyn, Bronx y Staten Island, as√≠ como en la parte alta de Manhattan (por encima de la calle 96 Este y la calle 110 Oeste). No pueden recoger pasajeros que los detengan en la calle en el centro de Manhattan (la "zona de exclusi√≥n de llamadas") ni en los aeropuertos de LaGuardia y JFK.

    """)

elif opcion == "4. Datos":
    st.header("Muestra y Estructura de los Datos")

    st.markdown("""
        Aqu√≠ se muestra una **muestra aleatoria** del DataFrame resultante despu√©s del proceso de limpieza. 
        Este es el conjunto de datos final utilizado para la aplicaci√≥n; en la aplicacion se utiliz√≥ una muestra de 500.000 datos.
    """)

    # Mostrar una muestra significativa (ej. las primeras 1000 filas)
    st.subheader("Muestra de Datos (2,000 Filas)")
    st.dataframe(
        df.head(2000),
        use_container_width=True,
        # Opcional: ajustar altura si el DF es muy grande visualmente
        # height=400
    )

elif opcion == "5. Cuestionario SQL":
    import pandas as pd

    st.header("üîë Resultados Clave del Cuestionario")

    current_dir = os.path.dirname(os.path.abspath(__file__))

    kpis_path = os.path.join(current_dir, "..", "data", "processed",
                             "resultados_consolidados.csv")

    try:
        # Cargar el archivo con la ruta absoluta
        df_kpis = pd.read_csv(kpis_path)

    except FileNotFoundError:
        # Se ejecutara si no se encuentra el archivo
        st.error(
            f"Error (Archivo no encontrado): Verifique que 'resultados_consolidados.csv' est√© en: {kpis_path}"
        )
        st.stop()

    try:
        # 1. T√≠tulo principal de la secci√≥n
        st.subheader("Resultados Detallados por Consulta SQL")
        st.markdown("---")

        # 2. Iterar por cada consulta en orden (1, 2, 3, 4, ...)
        for id_consulta in sorted(df_kpis['ID_Consulta'].unique()):
            # Filtrar el DataFrame para la consulta actual
            df_consulta = df_kpis[df_kpis['ID_Consulta'] == id_consulta].copy()

            # Obtener el nombre de la consulta para el t√≠tulo
            nombre_consulta = df_consulta['Consulta'].iloc[0]

            # T√≠tulo de la secci√≥n
            st.markdown(f"### üîç Consulta {id_consulta}: {nombre_consulta}")
            st.markdown("---")

            # L√≥gica de visualizaci√≥n espec√≠fica por ID

            if id_consulta == 1:
                # C1: Distancia promedio y tiempo promedio
                col1, col2 = st.columns(2)

                # Distancia Promedio
                dist_row = df_consulta[df_consulta['Etiqueta']
                                       == 'Distancia promedio'].iloc[0]
                col1.metric("Distancia Promedio",
                            f"{dist_row['Valor Numerico']} {dist_row['Unidad']}")

                # Tiempo Promedio
                tiempo_row = df_consulta[df_consulta['Etiqueta']
                                         == 'Tiempo promedio'].iloc[0]
                col2.metric(
                    "Tiempo Promedio", f"{tiempo_row['Valor Numerico']} {tiempo_row['Unidad']}")

            elif id_consulta == 2:
                # C2: M√©todo de pago m√°s com√∫n

                # 1. Obtener el nombre del m√©todo
                metodo_row = df_consulta[df_consulta['Etiqueta']
                                         == 'M√©todo de pago m√°s usado'].iloc[0]
                metodo = metodo_row['Unidad']

                # 2. Obtener el conteo
                conteo_row = df_consulta[df_consulta['Etiqueta']
                                         == 'Cantidad de viajes que lo usaron'].iloc[0]
                conteo = int(conteo_row['Valor Numerico'])

                st.metric("M√©todo de Pago M√°s Com√∫n",
                          metodo.title(),
                          f"{conteo:,} viajes registrados")

            elif id_consulta == 3:
                # C3: Propina promedio seg√∫n tipo de pago
                st.write("Propina Promedio por M√©todo de Pago (Propina > 0):")
                df_display = df_consulta[['Etiqueta', 'Valor Numerico', 'Unidad']].rename(columns={
                    'Etiqueta': 'Tipo de Pago',
                    'Valor Numerico': 'Propina Promedio',
                    'Unidad': 'Unidad'
                })
                st.dataframe(df_display, hide_index=True)

            elif id_consulta == 4:
                # C4: Porcentaje de viajes por tipo de tarifa
                st.write("Distribuci√≥n Porcentual por Tipo de Tarifa:")
                df_display = df_consulta[['Etiqueta', 'Valor Numerico', 'Unidad']].rename(columns={
                    'Etiqueta': 'Tipo de Tarifa',
                    'Valor Numerico': 'Porcentaje',
                    'Unidad': 'Unidad'
                })
                # Formatear el porcentaje a dos decimales
                df_display['Porcentaje'] = df_display['Porcentaje'].round(2)
                st.dataframe(df_display, hide_index=True)

            elif id_consulta == 5:
                # C5: Categor√≠a de Distancia.
                st.write("Conteo de Viajes por Categor√≠a de Distancia:")
                df_display = df_consulta[['Etiqueta', 'Valor Numerico', 'Unidad']].rename(columns={
                    'Etiqueta': 'Categor√≠a de Distancia',
                    'Valor Numerico': 'Conteo de Viajes',
                    'Unidad': 'Unidad'
                })
                # Convertir a entero para mejor lectura
                df_display['Conteo de Viajes'] = df_display['Conteo de Viajes'].astype(
                    int)
                st.dataframe(df_display, hide_index=True)

            # Espacio al final de cada consulta
            st.markdown("---")

    except Exception as e:
        # Si la carga fue exitosa pero la extracci√≥n fall√≥
        st.error(
            "Error (Fallo de Extracci√≥n): Se encontr√≥ un error al procesar los datos del CSV. Revise las etiquetas y el formato."
        )
        st.exception(e)

elif opcion == "6. An√°lisis exploratorio de datos":

    st.header("An√°lisis exploratorio de datos")

    # Grafico de cantidad de viajes por hora del dia

    st.subheader("Cantidad de viajes por hora del d√≠a")

    # Filtro
    dias = df['day_of_week'].unique()
    dias_ordenados = ['Monday', 'Tuesday',
                      'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
    dias = [d for d in dias_ordenados if d in dias]
    dias_seleccionado = st.selectbox("Selecciona el d√≠a de la semana:", dias)

    df_filtrado = df[df['day_of_week'] == dias_seleccionado]

    # Calcular viajes por hora
    viajes_hora = trips_per_hour(df_filtrado)

    # Columna de porcentaje
    viajes_hora['porcentaje'] = viajes_hora['num_viajes'] / \
        viajes_hora['num_viajes'].sum() * 100
    # Grafico interactivo
    fig = px.bar(
        viajes_hora,
        x='hour',
        y='porcentaje',
        title="Distribuci√≥n porcentual de viajes seg√∫n la hora del d√≠a",
        labels={"hour": "Hora del d√≠a",
                "porcentaje": "Porcentaje de viajes (%)"}
    )
    st.plotly_chart(fig)

# Grafico de duracion promedio por hora
    st.subheader("Duraci√≥n promedio del viaje por hora del d√≠a")

    # Calcular duracion promedio por hora
    duracion_hora = avg_trip_duration_per_hour(df)

    # Grafico interactivo
    fig2 = px.line(
        duracion_hora,
        x='hour',
        y='duracion_promedio_min',
        markers=True,
        title="Duraci√≥n promedio del viaje seg√∫n la hora del d√≠a",
        labels={"hour": "Hora del d√≠a",
                "duracion_promedio_min": "Duraci√≥n promedio (minutos)"}
    )
    st.plotly_chart(fig2, use_container_width=True)

    # Histograma de la distribucion de distancias de viajes

    st.subheader("Distribuci√≥n de la distancia de los viajes")

    # Filtrar y preparar datos
    df_dist = trip_distance_distribution(df)

    # Histograma interactivo

    fig3 = px.histogram(
        df_dist,
        x='trip_distance',
        nbins=60,
        histnorm="percent",
        title="Distribuci√≥n de la distancia de los viajes (en millas)",
        labels={"trip_distance": "Distancia del viaje (millas)"},
        opacity=0.75
    )

    fig3.update_layout(bargap=0.05)
    st.plotly_chart(fig3, use_container_width=True)

    # Grafico de la distribucion de metodos de pago
    st.subheader("M√©todo de pago m√°s utilizado")
    from utils import payment_distribution
    pagos = payment_distribution(df)

    fig4 = px.pie(
        pagos,
        names="M√©todo de pago",
        values="Cantidad de viajes",
        title="Distribuci√≥n de los m√©todos de pago",
        hole=0.4
    )
    st.plotly_chart(fig4)

    # Grafico de relacion entre tarifa total y propina

    st.subheader("Relaci√≥n entre tarifa total y propina")
    from utils import fare_tip_relation

    df_fare_tip = fare_tip_relation(df)

    fig5 = px.scatter(
        df_fare_tip,
        x='total_amount',
        y='tip_amount',
        opacity=0.6,
        title="Relaci√≥n entre Tarifa Total y Propina (con l√≠nea de tendencia)",
        labels={
            "total_amount": "Tarifa total (USD)",
            "tip_amount": "Propina (USD)"
        },
        trendline="ols",
        color_discrete_sequence=["#1f77b4"]
    )

    # An√°lisis estadistico automatico
    # Calcular la correlacion entre ambas variables
    correlacion = df_fare_tip['total_amount'].corr(df_fare_tip["tip_amount"])

    # Interpretar la correlacion
    if correlacion > 0.7:
        interpretacion = "fuerte y positiva"
    elif correlacion > 0.3:
        interpretacion = "moderada y positiva"
    elif correlacion > 0:
        interpretacion = "d√©bil y positiva"
    elif correlacion < -0.7:
        interpretacion = "fuerte y negativa"
    elif correlacion < -0.3:
        interpretacion = "moderada y negativa"
    elif correlacion < 0:
        interpretacion = "d√©bil y negativa"
    else:
        interpretacion = "nula o inexistente"

    # Texto interpretativo
    analisis = f"""
    **An√°lisis de la relaci√≥n entre tarifa total y propina:**
    - Coeficiente de correlaci√≥n: **{correlacion:.3f}**
    - Interpretaci√≥n: Existe una correlaci√≥n {interpretacion} entre el monto total del viaje y la propina.
    """

    st.plotly_chart(fig5)
    st.markdown(analisis)

    # Mapa de calor de zonas

    # Filtro horario
    st.markdown("### üîç Filtros de visualizaci√≥n para ambos Mapas")
    hora_min, hora_max = st.slider(
        "Selecciona el rango horario (seg√∫n hora de recogida y llegada):",
        0, 23, (0, 23)
    )

    df_filtrado = df[
        (df['tpep_pickup_datetime'].dt.hour >= hora_min) &
        (df['tpep_pickup_datetime'].dt.hour <= hora_max)

    ]

    st.subheader("Mapa del Total de Viajes por Zona de Recogida")

    from utils import trips_per_zone
    zonas, geojson = trips_per_zone(df_filtrado)

    fig6 = px.choropleth_mapbox(
        zonas,
        geojson=geojson,
        color="Total_viajes",
        locations="location_id",
        featureidkey="properties.location_id",
        hover_name="Zone",
        hover_data=["Borough", "Total_viajes"],
        color_continuous_scale="Viridis",
        mapbox_style="carto-positron",
        center={"lat": 40.7128, "lon": -74.0060},
        zoom=9,
        opacity=0.6,
        title="Total de Viajes por Zona de Recogida"
    )
    st.plotly_chart(fig6, use_container_width=True)

    # Mapa del total de viajes por zona de llegada
    st.subheader("Mapa del Total de Viajes por Zona de Llegada")

    from utils import trips_per_dropoff_zone
    zonas_drop, geojson_drop = trips_per_dropoff_zone(df_filtrado)

    fig7 = px.choropleth_mapbox(
        zonas_drop,
        geojson=geojson_drop,
        color="Total_viajes",
        locations="location_id",
        featureidkey="properties.location_id",
        hover_name="Zone",
        hover_data=["Borough", "Total_viajes"],
        color_continuous_scale="Viridis",
        mapbox_style="carto-positron",
        center={"lat": 40.7128, "lon": -74.0060},
        zoom=9,
        opacity=0.6,
        title="Total de viajes por zona de llegada"
    )
    st.plotly_chart(fig7, use_container_width=True)


elif opcion == "7. An√°lisis Estad√≠stico":
    st.header("An√°lisis Estad√≠stico")
    st.write("En esta secci√≥n se lleva a cabo un an√°lisis estad√≠stico de los datos.")

elif opcion == "8. Conclusiones":
    st.header("Conclusiones")
    st.write(
        "En esta secci√≥n se presentan las conclusiones derivadas del an√°lisis realizado.")

elif opcion == "9. Bibliograf√≠as":
    st.header("Bibliografias")
